// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Biljka", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Lekovita")
                        .HasColumnType("boolean");

                    b.Property<string>("Naziv")
                        .HasColumnType("text");

                    b.Property<string>("Opis")
                        .HasColumnType("text");

                    b.Property<string>("Slika")
                        .HasColumnType("text");

                    b.Property<string>("Vrsta")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Biljke");
                });

            modelBuilder.Entity("Domain.Komentar", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("KorisnikId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ObilazakID")
                        .HasColumnType("uuid");

                    b.Property<string>("Tekst")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("ObilazakID");

                    b.ToTable("Komentari");
                });

            modelBuilder.Entity("Domain.KoordinatePodrucja", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("PodrucjeID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("PodrucjeID");

                    b.ToTable("KoordinatePodrucja");
                });

            modelBuilder.Entity("Domain.KoordinateRute", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("RutaID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("RutaID");

                    b.ToTable("KoordinateRute");
                });

            modelBuilder.Entity("Domain.Korisnik", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Ime")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Prezime")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Telefon")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Korisnik");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Obilazak", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alergije")
                        .HasColumnType("text");

                    b.Property<int>("BrojMaxPolaznika")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DatumOdrzavanja")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MestoOkupljanja")
                        .HasColumnType("text");

                    b.Property<string>("Naziv")
                        .HasColumnType("text");

                    b.Property<string>("Opis")
                        .HasColumnType("text");

                    b.Property<Guid?>("PodrucjeID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RutaID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VodicId")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("PodrucjeID");

                    b.HasIndex("RutaID");

                    b.HasIndex("VodicId");

                    b.ToTable("Obilasci");
                });

            modelBuilder.Entity("Domain.Ocena", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Komentar")
                        .HasColumnType("text");

                    b.Property<Guid?>("KorisnikId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VodicId")
                        .HasColumnType("uuid");

                    b.Property<int>("VrednostOcene")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("VodicId");

                    b.ToTable("Ocene");
                });

            modelBuilder.Entity("Domain.Podrucja_Biljke", b =>
                {
                    b.Property<Guid>("BiljkaID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PodrucjeID")
                        .HasColumnType("uuid");

                    b.HasKey("BiljkaID", "PodrucjeID");

                    b.HasIndex("PodrucjeID");

                    b.ToTable("Podrucja_Biljke");
                });

            modelBuilder.Entity("Domain.Podrucje", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Oblast")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Podrucja");
                });

            modelBuilder.Entity("Domain.PrijavljeniObilazak", b =>
                {
                    b.Property<Guid>("ObilazakID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("KorisnikID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DatumPrijave")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ObilazakID", "KorisnikID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("PrijavljeniObilasci");
                });

            modelBuilder.Entity("Domain.Ruta", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Duzina")
                        .HasColumnType("double precision");

                    b.Property<string>("Opis")
                        .HasColumnType("text");

                    b.Property<Guid?>("PodrucjeID")
                        .HasColumnType("uuid");

                    b.Property<string>("Prohodnost")
                        .HasColumnType("text");

                    b.Property<string>("Tip")
                        .HasColumnType("text");

                    b.Property<string>("Uspon")
                        .HasColumnType("text");

                    b.Property<bool>("ZaDecu")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.HasIndex("PodrucjeID");

                    b.ToTable("Rute");
                });

            modelBuilder.Entity("Domain.UserFollowing", b =>
                {
                    b.Property<Guid>("ObserverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid");

                    b.HasKey("ObserverId", "TargetId");

                    b.HasIndex("TargetId");

                    b.ToTable("UserFollowings");
                });

            modelBuilder.Entity("Domain.src.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Domain.src.KorisnikRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Domain.src.Photo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("KorisnikId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Slike");
                });

            modelBuilder.Entity("Domain.src.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("KorisnikId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Domain.src.VodicZahtev", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BrojOdrzanihObilazaka")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Ime")
                        .HasColumnType("text");

                    b.Property<string>("Prezime")
                        .HasColumnType("text");

                    b.Property<string>("PutanjaSlikeDiplome")
                        .HasColumnType("text");

                    b.Property<string>("StrucnaSprema")
                        .HasColumnType("text");

                    b.Property<string>("Telefon")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VodicZahtevi");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Vodic", b =>
                {
                    b.HasBaseType("Domain.Korisnik");

                    b.Property<int>("BrojOdrzanihObilazaka")
                        .HasColumnType("integer");

                    b.Property<string>("StrucnaSprema")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Vodic");
                });

            modelBuilder.Entity("Domain.Komentar", b =>
                {
                    b.HasOne("Domain.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId");

                    b.HasOne("Domain.Obilazak", "Obilazak")
                        .WithMany("Komentari")
                        .HasForeignKey("ObilazakID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Korisnik");

                    b.Navigation("Obilazak");
                });

            modelBuilder.Entity("Domain.KoordinatePodrucja", b =>
                {
                    b.HasOne("Domain.Podrucje", "Podrucje")
                        .WithMany("Koordinate")
                        .HasForeignKey("PodrucjeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Podrucje");
                });

            modelBuilder.Entity("Domain.KoordinateRute", b =>
                {
                    b.HasOne("Domain.Ruta", "Ruta")
                        .WithMany("Koordinate")
                        .HasForeignKey("RutaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Ruta");
                });

            modelBuilder.Entity("Domain.Obilazak", b =>
                {
                    b.HasOne("Domain.Podrucje", "Podrucje")
                        .WithMany("Obilasci")
                        .HasForeignKey("PodrucjeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Ruta", "Ruta")
                        .WithMany()
                        .HasForeignKey("RutaID");

                    b.HasOne("Domain.Vodic", "Vodic")
                        .WithMany()
                        .HasForeignKey("VodicId");

                    b.Navigation("Podrucje");

                    b.Navigation("Ruta");

                    b.Navigation("Vodic");
                });

            modelBuilder.Entity("Domain.Ocena", b =>
                {
                    b.HasOne("Domain.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId");

                    b.HasOne("Domain.Vodic", "Vodic")
                        .WithMany("Ocene")
                        .HasForeignKey("VodicId");

                    b.Navigation("Korisnik");

                    b.Navigation("Vodic");
                });

            modelBuilder.Entity("Domain.Podrucja_Biljke", b =>
                {
                    b.HasOne("Domain.Biljka", "Biljka")
                        .WithMany("Podrucja")
                        .HasForeignKey("BiljkaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Podrucje", "Podrucje")
                        .WithMany("Biljke")
                        .HasForeignKey("PodrucjeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Biljka");

                    b.Navigation("Podrucje");
                });

            modelBuilder.Entity("Domain.PrijavljeniObilazak", b =>
                {
                    b.HasOne("Domain.Korisnik", "Korisnik")
                        .WithMany("PrijavljeniObilasci")
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Obilazak", "Obilazak")
                        .WithMany("Ucesnici")
                        .HasForeignKey("ObilazakID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Obilazak");
                });

            modelBuilder.Entity("Domain.Ruta", b =>
                {
                    b.HasOne("Domain.Podrucje", "Podrucje")
                        .WithMany("Rute")
                        .HasForeignKey("PodrucjeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Podrucje");
                });

            modelBuilder.Entity("Domain.UserFollowing", b =>
                {
                    b.HasOne("Domain.Korisnik", "Observer")
                        .WithMany("Followings")
                        .HasForeignKey("ObserverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Korisnik", "Target")
                        .WithMany("Followers")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Observer");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Domain.src.KorisnikRole", b =>
                {
                    b.HasOne("Domain.src.AppRole", "Role")
                        .WithMany("KorisnikRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Korisnik", "Korisnik")
                        .WithMany("KorisnikRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.src.Photo", b =>
                {
                    b.HasOne("Domain.Korisnik", null)
                        .WithMany("Slike")
                        .HasForeignKey("KorisnikId");
                });

            modelBuilder.Entity("Domain.src.RefreshToken", b =>
                {
                    b.HasOne("Domain.Korisnik", "Korisnik")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("KorisnikId");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.src.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Biljka", b =>
                {
                    b.Navigation("Podrucja");
                });

            modelBuilder.Entity("Domain.Korisnik", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Followings");

                    b.Navigation("KorisnikRoles");

                    b.Navigation("PrijavljeniObilasci");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Slike");
                });

            modelBuilder.Entity("Domain.Obilazak", b =>
                {
                    b.Navigation("Komentari");

                    b.Navigation("Ucesnici");
                });

            modelBuilder.Entity("Domain.Podrucje", b =>
                {
                    b.Navigation("Biljke");

                    b.Navigation("Koordinate");

                    b.Navigation("Obilasci");

                    b.Navigation("Rute");
                });

            modelBuilder.Entity("Domain.Ruta", b =>
                {
                    b.Navigation("Koordinate");
                });

            modelBuilder.Entity("Domain.src.AppRole", b =>
                {
                    b.Navigation("KorisnikRoles");
                });

            modelBuilder.Entity("Domain.Vodic", b =>
                {
                    b.Navigation("Ocene");
                });
#pragma warning restore 612, 618
        }
    }
}
